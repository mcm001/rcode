buildscript {
    ext.kotlin_version = '1.3.31'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath fileTree(dir: 'libs', include: '*.jar')
    }
}
plugins {
    // id "edu.wpi.first.GradleRIO" version "2019.1.1"
    id "java"
    id "com.diffplug.gradle.spotless" version "3.17.0"
    id "org.jetbrains.kotlin.jvm" version "1.3.31"
}

apply plugin: 'application'
apply plugin: 'kotlin'
// mainClassName = 'pantryvisualizer.Visualizer'
mainClassName = 'dataCollector.Main'

// set JAVA_HOME = "/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/"

// compileJava.options.fork = true
compileJava.options.forkOptions.executable = "/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/bin/java"

repositories {
    mavenCentral()
      maven { url 'https://jitpack.io' }
}

dependencies {

    // compile group: 'org.javatuples', name: 'javatuples', version: '1.2'

//    compile 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'

//    compile files('libs/javatuples-1.2.jar')
        // compile files('libs/krpc-java-0.4.8.jar')
            // compile files('libs/protobuf-java-3.8.0.jar')


    // compile 'org.ghrobotics.FalconLibrary:core:2019.5.25'

  // compile wpi.deps.wpilib()
  // compile wpi.deps.vendor.java()
  // nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
  // nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

  // testCompileOnly(
  //   'junit:junit:4.12'
  // )
  // testImplementation(
  //   'org.junit.jupiter:junit-jupiter-api:5.1.0'
  // )
  // testRuntimeOnly(
  //   'org.junit.jupiter:junit-jupiter-engine:5.1.0',
  //   'org.junit.vintage:junit-vintage-engine:5.1.0'
  // )
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}


spotless {
  java {
    // licenseHeader '/* Licensed under Apache-2.0 */'	// License header
    // Obviously, you can't specify both licenseHeader and licenseHeaderFile at the same time

    // importOrder 'java', 'javax', 'org', 'com', 'com.diffplug', ''	// A sequence of package names
    importOrderFile 'config\\spotless\\importorder'				// An import ordering file, exported from Eclipse
    // As before, you can't specify both importOrder and importOrderFile at the same time
    // You probably want an empty string at the end - all of the imports you didn't specify
    // explicitly will go there.

    removeUnusedImports() // removes any unused imports

    eclipse().configFile 'config\\spotless\\eclipseformat.xml'	// XML file dumped out by the Eclipse formatter
    // If you have Eclipse preference or property files, you can use them too.
    // eclipse('4.7.1') to specify a specific version of eclipse,
    // available versions are: https://github.com/diffplug/spotless/tree/master/lib-extra/src/main/resources/com/diffplug/spotless/extra/config/eclipse_jdt_formatter
  }
}

test {
  useJUnitPlatform()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}